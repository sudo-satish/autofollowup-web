// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  email     String   @unique
  name      String?
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])
  clerkId   String   @unique
}

model Agent {
  id                      Int                  @id @default(autoincrement())
  createdAt               DateTime             @default(now())
  name                    String
  conversations           Followup[]
  conversationAuditTrails FollowupAuditTrail[]
  systemPrompt            String
}

model Client {
  id                      Int                  @id @default(autoincrement())
  createdAt               DateTime             @default(now())
  name                    String
  phone                   String
  countryCode             String
  email                   String?
  conversations           Followup[]
  conversationAuditTrails FollowupAuditTrail[]
  companyId               Int
  company                 Company              @relation(fields: [companyId], references: [id])
}

model Followup {
  id              Int            @id @default(autoincrement())
  clientId        Int
  client          Client         @relation(fields: [clientId], references: [id])
  agentId         Int
  agent           Agent          @relation(fields: [agentId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  messages        Message[]
  followupDate    DateTime?
  status          FollowupStatus @default(DRAFT)
  context         String?
  summary         String?
  conversationSid String?
  isAutoMode      Boolean        @default(true)
}

model FollowupAuditTrail {
  id           Int            @id @default(autoincrement())
  clientId     Int
  client       Client         @relation(fields: [clientId], references: [id])
  agentId      Int
  agent        Agent          @relation(fields: [agentId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  followupDate DateTime?
  status       FollowupStatus @default(DRAFT)
  context      String?
  summary      String?
}

enum FollowupStatus {
  DRAFT
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  FAILED
}

model Message {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  followupId  Int
  followup    Followup    @relation(fields: [followupId], references: [id])
  contentType ContentType @default(TEXT)
  content     String
  role        MessageRole @default(user)
  channel     Channel     @default(WHATSAPP)
}

enum ContentType {
  TEXT
  IMAGE
  AUDIO
  VIDEO
  FILE
  LINK
  OTHER
}

enum MessageRole {
  user
  data
  system
  assistant
}

enum Channel {
  WHATSAPP
  TELEGRAM
  SMS
  EMAIL
  OTHER
}

model AgentInvocationAuditTrail {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  messages  Json
  response  Json
}

model Company {
  id                 Int                  @id @default(autoincrement())
  createdAt          DateTime             @default(now())
  name               String
  address            String?
  website            String?
  description        String?
  clerkId            String               @unique
  User               User[]
  Client             Client[]
  KnowledgeBase      KnowledgeBase[]
  WhatsappConnection WhatsappConnection[]
}

enum KnowledgeBaseType {
  LINK
  WEBSITE
  PDF
  DOCUMENT
  EXCEL
  PPT
  IMAGE
  VIDEO
  TEXT
  OTHER
}

model KnowledgeBase {
  id        Int               @id @default(autoincrement())
  createdAt DateTime          @default(now())
  title     String
  content   String
  type      KnowledgeBaseType
  companyId Int
  company   Company           @relation(fields: [companyId], references: [id])
  url       String?
  files     File[]
}

model File {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  url             String
  knowledgeBaseId Int
  knowledgeBase   KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id])
}

model WhatsappConnection {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  companyId   Int
  company     Company  @relation(fields: [companyId], references: [id])
  isConnected Boolean  @default(false)
}
